[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/DELL/Documents/SINGLE-CYCLE/src/main/Singlecycle/ALU.scala","languageId":"scala","version":1,"text":"package Singlecycle\r\nimport chisel3._\r\nimport chisel3.util._\r\n\r\n\r\nclass Alu extends Module {\r\n    val io = IO(new Bundle {\r\n        val oper_a = Input(SInt(32.W))\r\n        val oper_b = Input(SInt(32.W))\r\n        val aluCtrl = Input(UInt(5.W))\r\n        val out = Output(SInt(32.W))\r\n        val branch = Output(UInt(1.W))\r\n    })\r\n    \r\n    when(io.aluCtrl === \"b00000\".U) {\r\n        // ADD\r\n        io.out := io.oper_a + io.oper_b\r\n\r\n    } .elsewhen(io.aluCtrl === \"b00001\".U) {\r\n        // SLL/SLLI     // works for both signed and unsigned numbers\r\n        val shift_left_by = io.oper_b(4,0)\r\n        io.out:= io.oper_a << shift_left_by\r\n\r\n    } .elsewhen(io.aluCtrl === \"b00010\".U) {\r\n        // SLT/SLTI\r\n        when(io.oper_a < io.oper_b) {\r\n            io.out := 1.S\r\n        } .otherwise {\r\n            io.out := 0.S\r\n        } \r\n\r\n    } .elsewhen(io.aluCtrl === \"b00011\".U || io.aluCtrl === \"b10110\".U) {\r\n        // SLTU/SLTUI/BLTU\r\n        when(io.oper_a.asUInt < io.oper_b.asUInt) {\r\n            io.out := 1.S\r\n        } .otherwise {\r\n            io.out := 0.S\r\n        }\r\n\r\n    } .elsewhen(io.aluCtrl === \"b00100\".U) {\r\n        // XOR/XORI\r\n        io.out := io.oper_a ^ io.oper_b\r\n\r\n    } .elsewhen(io.aluCtrl === \"b00101\".U || io.aluCtrl === \"b01101\".U) {\r\n        // SRL/SRLI/SRA/SRAI\r\n        val shift_right_by = io.oper_b(4,0)\r\n        io.out := io.oper_a >> shift_right_by\r\n\r\n    } .elsewhen(io.aluCtrl === \"b00110\".U) {\r\n        // OR/ORI\r\n        io.out := io.oper_a | io.oper_b\r\n\r\n    } .elsewhen(io.aluCtrl === \"b00111\".U) {\r\n        // AND/ANDI\r\n        io.out := io.oper_a & io.oper_b\r\n\r\n    } .elsewhen(io.aluCtrl === \"b01000\".U) {\r\n        // SUB\r\n        io.out := io.oper_a - io.oper_b\r\n    \r\n    } .elsewhen(io.aluCtrl === \"b10000\".U) {\r\n        // BEQ\r\n        when(io.oper_a === io.oper_b) {\r\n            io.out := 1.S\r\n        } .otherwise {\r\n            io.out := 0.S\r\n        }\r\n\r\n    } .elsewhen(io.aluCtrl === \"b10001\".U) {\r\n        // BNE\r\n        when(~(io.oper_a === io.oper_b)) {\r\n            io.out := 1.S\r\n        } .otherwise {\r\n            io.out := 0.S\r\n        }\r\n\r\n    } .elsewhen(io.aluCtrl === \"b10100\".U) {\r\n        // BLT\r\n        when(io.oper_a < io.oper_b) {\r\n            io.out := 1.S\r\n        } .otherwise {\r\n            io.out := 0.S\r\n        }\r\n\r\n    } .elsewhen(io.aluCtrl === \"b10101\".U) {\r\n        // BGE\r\n        when(io.oper_a >= io.oper_b) {\r\n            io.out := 1.S\r\n        } .otherwise {\r\n            io.out := 0.S\r\n        }\r\n\r\n    } .elsewhen(io.aluCtrl === \"b10111\".U) {\r\n        // BGEU\r\n        when(io.oper_a.asUInt >= io.oper_b.asUInt) {\r\n            io.out := 1.S\r\n        } .otherwise {\r\n            io.out := 0.S\r\n        }\r\n\r\n    } .elsewhen(io.aluCtrl === \"b11111\".U) {\r\n        // JALR/JAL\r\n        io.out := io.oper_a\r\n    }\r\n\r\n    .otherwise {\r\n        io.out := DontCare\r\n    }\r\n\r\n    when(io.aluCtrl(4,3) === \"b10\".U && io.out === 1.S) {\r\n        io.branch := 1.U\r\n    } .otherwise {\r\n        io.branch := 0.U\r\n    }\r\n\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/DELL/Documents/SINGLE-CYCLE/src/test/Singlecycle/toptests.scala","languageId":"scala","version":1,"text":"package Singlecycle\r\nimport chisel3._\r\nimport org.scalatest._\r\nimport chiseltest._\r\n\r\nclass TOP_TESTS extends FreeSpec with ChiselScalatestTester{\r\n    \"top tests\" in {\r\n    test(new Top()){c=>\r\n//     c.io.instruction_step.poke(0.U)\r\n//     c.clock.step(1)\r\n//     c.io.instruction_step.poke(4.U)\r\n//     c.clock.step(1)\r\n//     c.io.instruction_step.poke(8.U)\r\n//     c.clock.step(1)\r\n//     c.io.instruction_step.poke(12.U)\r\n//     c.clock.step(1)\r\n//     c.io.instruction_step.poke(16.U)\r\n//     c.clock.step(1)\r\n//     // step(1)\r\n   c.clock.step(1)\r\n   c.clock.step(1)\r\n   c.clock.step(1)\r\n   c.clock.step(1)\r\n   c.clock.step(1)\r\n   c.clock.step(1)\r\n   c.clock.step(1)\r\n   c.clock.step(1)\r\n   c.clock.step(1)\r\n     }}}\r\n  "}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\DELL\Documents\SINGLE-CYCLE\target\scala-2.12\zinc\inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Sep 29, 2022 11:19:55 AM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
